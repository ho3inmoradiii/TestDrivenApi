<?php

namespace Tests\Feature;

use App\Models\TodoList;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TodoListTest extends TestCase
{
    use RefreshDatabase;

    private $list;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->list = TodoList::factory()->create();
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_fetch_all_todo_list()
    {

        // prepration / prepare

        // action / perform
        $response = $this->getJson(route('todo-list.index'));

        // assertion / predict
        $this->assertEquals(1,count($response->json()));
    }

    public function test_fetch_single_todo_list()
    {
        $response = $this->getJson(route('todo-list.show',$this->list->id))->assertOk()->json();

        $this->assertEquals($response['name'],$this->list->name);
    }

    public function test_store_new_todo_list()
    {
        $list = TodoList::factory()->make();
        $response = $this->postJson(route('todo-list.store'),['name'=>$list->name])->assertCreated()->json();

        //$this->assertEquals($response['name'],$list->name);

        $this->assertDatabaseHas('todo_lists',['name'=>$list->name]);
    }

    public function test_while_storing_todo_list_name_field_is_required()
    {
        $this->withExceptionHandling();
        $this->postJson(route('todo-list.store'))->assertUnprocessable()->assertJsonValidationErrors(['name']);
    }

    public function test_delete_todo_list()
    {
        $this->deleteJson(route('todo-list.destroy',$this->list->id))
            ->assertNoContent();

        //dd($this->list->id);

        $this->assertDatabaseMissing('todo_lists',['name' => $this->list->name]);
    }

    public function test_update_todo_list()
    {
        $response = $this->patchJson(route('todo-list.update',$this->list->id),['name'=>'Updated name'])
            ->assertOk();
        //dd($response['name']);

        $this->assertDatabaseHas('todo_lists',['id'=>$this->list->id,'name'=>$response['name']]);
    }

    public function test_while_updating_todo_list_name_field_is_required()
    {
        $this->withExceptionHandling();
        $this->patchJson(route('todo-list.update',$this->list->id))->assertUnprocessable()->assertJsonValidationErrors(['name']);
    }
}
